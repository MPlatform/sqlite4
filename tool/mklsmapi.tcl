
#
# This script is used to generate the www/lsmapi.wiki page from comments in
# the source file lsm.h. It should be run as follows:
#
#    tclsh ./src/lsm.h > www/lsmapi.wiki
#
# before committing changes to API comments in file lsm.h.
#

set document_preamble {
<title>LSM API Reference</title>
<nowiki>
<br note="
  DO NOT EDIT!!! 
  DO NOT EDIT!!! 
  DO NOT EDIT!!! 
  This document is generated by script tools/updateapi.tcl.
  DO NOT EDIT!!! 
  DO NOT EDIT!!! 
  DO NOT EDIT!!! 
">

<p>
This page contains the LSM API Reference Manual. It is intended to complement
the <a href=lsmusr.wiki>LSM User Manual</a>.
}

set document_text ""
set document_toc  ""

set document_defines   [list]
set document_functions [list]
set document_types     [list]

proc put_section {} {
  global S

  if {$::state != "off"} {

    set style {style=text-decoration:none}

    regexp {^([^( ]*)} $S(heading) -> id
    set id [string tolower [string map {- _} $id]]
    if {$id == "file"} {set id filespace}

    set defs [list]
    foreach line [split $S(code) "\n"] {
      if {[regexp {^#define (LSM_[^ ]*)} $line -> sym]} {
        lappend defs $sym
        lappend ::document_defines $sym
      } 

      if {[regexp {struct (lsm_[a-z]*)} $line -> sym]} {
        lappend defs $sym
        lappend ::document_types $sym
      } 

      if {[regexp { (lsm_[a-z_]*)\(} $line -> sym]} {
        lappend defs $sym
        lappend ::document_functions $sym
      }

    }

    append ::document_text "<h2 id=$id>$S(heading)"
    foreach sym $defs { append ::document_text "<a id=$sym></a>" }
    append ::document_text "</h2>\n"

    append ::document_text "<verbatim>$S(code)</verbatim>\n"
    append ::document_text "$S(text)"

    append ::document_toc "<li><a href=\"#$id\" $style>$S(heading)</a>\n"
  }

  set S(heading) ""
  set S(code) ""
  set S(text) ""
}

# Process the command line arguments.
#
if {[llength $argv]!=1} {
  puts stderr "Usage: $argv0 <path to lsm.h>"
  exit -1
}
set zipvfsh [lindex $argv 0]
set fd [open $zipvfsh]

# The $state variable may be set to one of:
#
#   off
#   on
#   table
#   deflist
#
set state off

while {![eof $fd]} {
  set line [gets $fd]

  switch -regexp -- $line {
    {^/\* *$} { # no-op }
    {^\*/ *$} { # no-op }
    {^ *$} { # no-op }

    {^\*\* CAPI: .*$} {
      put_section
      regexp {.*CAPI: (.*)} $line -> S(heading)
      set state on
    }
    {.*ENDOFAPI.*} {
      put_section
      set state off
    }

    {^\*\* *[^ ]*: *$} {
      regexp {( *)([^ ]*):} $line -> ws title
      if {$state == "on"} {
        if {[string length $ws] > 1} {
          append S(text) <table>
          set state table
        } else {
          append S(text) <dl>
          set state deflist
        }
      }
      if {$state == "table"} {
        append S(text) "<tr><td valign=top>$title<td>"
      }
      if {$state == "deflist"} {
        append S(text) <dt>$title<dd>
      }
    }

    {^\*\* *$} {
      if {$state == "on" || $state=="deflist"} {
        append S(text) <p>
      }
    }

    {^\*\*.*$} {
      if {$state != "off"} {
        regexp {^\*\*( *)(.*)} $line -> ws text

        if {$state == "table" && [string length $ws]<=1} {
          append S(text) </table><p>
          set state on
        }
        if {$state == "deflist" && [string length $ws]<=1} {
          append S(text) </dl><p>
          set state on
        }

        if {$state == "on" && [string length $ws]>=3} {
          append S(text) <blockquote><pre>$text</blockquote></pre>
        } else {
          append S(text) $text
        }

        append S(text) "\n"
      }
    }

    default {
      if {$state != "off"} {
        if {$state == "table"} { append S(text) </table> }
        if {$state == "deflist"} { append S(text) </dl> }
        set state on
      }
      if {$state == "on"} {
        append S(code) $line
        append S(code) "\n"
      }
    }
  }
}
put_section

close $fd

puts $document_preamble
puts "<h1>LSM API Topics</h1>"
puts <ol>
puts $document_toc
puts </ol>
set s "display:block;float:left;width:35ex"
puts "<h1 style=clear:both>All LSM API Functions</h1>"
foreach sym [lsort $document_functions] {
  puts "<span style=$s><a href=#$sym>$sym</a></span>"
}
puts "<br style=clear:both>"
puts "<h1 style=clear:both>All LSM API Types</h1>"
foreach sym [lsort $document_types] {
  puts "<span style=$s><a href=#$sym>$sym</a></span>"
}
puts "<br style=clear:both>"
puts "<h1>All LSM API Constants</h1>"
foreach sym [lsort $document_defines] {
  puts "<span style=$s><a href=#$sym>$sym</a></span>"
}
puts "<br style=clear:both>"
puts $document_text
