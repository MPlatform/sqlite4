# 2012 May 30
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
# The tests in this file focus on testing test that the LSM log file is 
# written and recovered correctly.
#

set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix log1

proc do_filesize_test {tn dbsz logsz} {
  uplevel [list do_test $tn { 
      list [file size test.db] [file size test.db-log] 
  } [list $dbsz $logsz]]
}

proc copy_db_files {from to} {
  forcecopy $from $to
  forcecopy $from-log $to-log
}
proc copy_and_recover {sql} {
  catch {db2 close}
  copy_db_files test.db test.db2
  sqlite4 db2 test.db2
  set res [execsql $sql db2]
  db2 close
  set res
}

proc do_recover_test {tn sql {res {}}} {
  set R [list]
  foreach r $res {lappend R $r}
  do_test $tn [list uplevel #0 [list copy_and_recover $sql]] $R
}

#-------------------------------------------------------------------------
#
reset_db
do_execsql_test 1.0 {
  CREATE TABLE t1(a, b);
  CREATE INDEX i1 ON t1(a, b);
  INSERT INTO t1 VALUES(1, 2);
  INSERT INTO t1 VALUES(3, 4);
}
do_recover_test 1.1 { 
  PRAGMA integrity_check;
  SELECT * FROM t1;
} { ok 1 2 3 4}

#-------------------------------------------------------------------------
#
reset_db
do_execsql_test 2.0 {
  CREATE TABLE t1(a PRIMARY KEY, b);
  CREATE INDEX i1 ON t1(b, a);
  INSERT INTO t1 VALUES(1, 2);
  INSERT INTO t1 VALUES(3, 4);
}
do_recover_test 2.1 { SELECT * FROM t1 } {1 2 3 4}
do_execsql_test 2.2 { 
  BEGIN;
    INSERT INTO t1 VALUES(7, 8);
  ROLLBACK;
  BEGIN;
    INSERT INTO t1 VALUES(5, 6);
  COMMIT;
}
do_filesize_test 2.3 0 241
do_recover_test  2.4 { SELECT * FROM t1 } {1 2 3 4 5 6}

do_execsql_test 2.5 { 
  BEGIN;
    SAVEPOINT one;
      INSERT INTO t1 VALUES(9, 10);
    ROLLBACK TO one;
    INSERT INTO t1 VALUES(7, 8);
  COMMIT;
}
do_filesize_test 2.6 0 271

do_execsql_test  2.7.1 { SELECT * FROM t1 } {1 2 3 4 5 6 7 8}
do_recover_test  2.7.2 { SELECT * FROM t1 } {1 2 3 4 5 6 7 8}
    

#-------------------------------------------------------------------------
#
reset_db
do_test         3.1 { sqlite4_lsm_config db main log-size 800 } 800
do_execsql_test 3.2 {
  CREATE TABLE t1(a PRIMARY KEY, b);
  INSERT INTO t1 VALUES(randstr(10,10), randstr(1000,1000));
}
do_test         3.3 { sqlite4_lsm_work db main -flush } {0}
do_execsql_test 3.4 {
  INSERT INTO t1 VALUES(randstr(10,10), randstr(100,100));
}
do_test         3.5 { sqlite4_lsm_work db main -check } {0}
do_execsql_test 3.6 { INSERT INTO t1 VALUES(randstr(10,10), randstr(100,100)) }
do_test         3.7 { 
  sqlite4_lsm_info db main log-structure 
} {1124 1271 0 0 0 139}
do_test         3.8 { sqlite4_lsm_work db main -flush } {0}
do_execsql_test 3.9 { INSERT INTO t1 VALUES(randstr(10,10), randstr(100,100)) }
do_test         3.10 { 
  execsql BEGIN
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  sqlite4 db2 ./test.db
  sqlite4_lsm_work db2 main -check
  db2 close
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql { INSERT INTO t1 VALUES(randstr(10,10), randstr(100, 100)) }
  execsql COMMIT
} {}
do_test         3.11 { 
  sqlite4_lsm_info db main log-structure 
} {0 0 139 1062 1272 1801}
do_recover_test 3.12 { SELECT * FROM t1 } [execsql {SELECT * FROM t1}]

finish_test

